#!/usr/bin/env python3
"""
ุงุฎุชุจุงุฑ ุณุฑูุน ููุชุญูู ูู ุฃู ุฅุตูุงุญ GQA ูู Cosmos Advanced ูุนูู ุจูุฌุงุญ
"""
import sys
import torch

print("๐ ุงุฎุชุจุงุฑ ุณุฑูุน ูู Cosmos Advanced - GQA Fix")
print("="*55)

try:
    from core.cosmos_model_advanced import CosmosAdvancedModel
    from .core.config_system import CosmosAdvancedConfig
    
    print("โ ุชู ุชุญููู ุงูููุชุจุงุช ุจูุฌุงุญ")
    
    # ุชูููู ุงุฎุชุจุงุฑ ุณุฑูุน
    config = CosmosAdvancedConfig(
        dim=128,
        n_layers=1,
        n_heads=8,
        n_kv_heads=4,  # GQA test
        vocab_size=500
    )
    
    print(f"โ๏ธ  ุชูููู ุงููููุฐุฌ: n_heads={config.n_heads}, n_kv_heads={config.n_kv_heads}")
    
    # ุฅูุดุงุก ุงููููุฐุฌ
    model = CosmosAdvancedModel(config)
    
    # ุชุนุทูู safety ูุชุฌูุจ ุงูุฃุฎุทุงุก
    model.safety_system = None
    
    print("โ ุชู ุฅูุดุงุก ุงููููุฐุฌ ุจูุฌุงุญ")
    
    # ุงุฎุชุจุงุฑ GQA
    input_ids = torch.randint(0, config.vocab_size, (1, 10))
    
    with torch.no_grad():
        # ุงุฎุชุจุงุฑ ุงูุทุจูุฉ ุงูุฃุณุงุณูุฉ
        x = model.tok_embeddings(input_ids)
        x = model.layers[0](x)
        
        print("โ ุชู ุชุดุบูู transformer layer ุจูุฌุงุญ")
        
        # ุงุฎุชุจุงุฑ ุงููุงูู
        x = model.norm(x)
        logits = model.output(x)
        
        print("โ ุชู ุชุดุบูู ุงููููุฐุฌ ุงููุงูู ุจูุฌุงุญ")
        
    print(f"๐ ุดูู ุงูุฅุฎุฑุงุฌ: {logits.shape}")
    print(f"๐ ุนุฏุฏ ุงููุนุงููุงุช: {model.total_params:,}")
    
    print("\n๐ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ูุฌุญุช!")
    print("โ ุฅุตูุงุญ GQA ูุนูู ุจุดูู ูุซุงูู")
    print("โ ุงููููุฐุฌ ูุณุชูุฑ ููุชูุงูู")
    
    sys.exit(0)
    
except Exception as e:
    print(f"โ ุฎุทุฃ: {e}")
    import traceback
    traceback.print_exc()
    print("\n๐ก ุชุฃูุฏ ูู ุชุซุจูุช PyTorch: uv run --with torch python3 ูุฐุง_ุงูููู.py")
    
    sys.exit(1)